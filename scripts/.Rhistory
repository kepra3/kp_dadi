} else {
mean <- approx_log_pars(obs_quantiles = c(lower, central, upper))[1]
sd <- approx_log_pars(obs_quantiles = c(lower, central, upper))[2]
beta[[r]] <- rlnorm(2000, meanlog = mean, sdlog = sd)
dat <-data.frame(beta[[r]])
}
ggplot(dat, aes(beta..r..)) +
geom_histogram() +
xlab(expression(beta)) +
ggtitle(data[r,2]) +
theme_bw() +
theme(title = element_text(face = "italic"))
ggsave(paste0("../results/metadata/B_distribution-lnorm", data[r,1], ".pdf"),
height = 10, width = 10, units = "cm", dpi = 400)
hist(beta[[r]], main = paste(data[r, 1]))
}
sigma <- list()
distribution.data <- data.frame()
for (r in 1:nrow(data)) {
sigma[[r]] <- sqrt(1/(4*pi*(NE[[r]]/data[r, "mag"])*beta[[r]]))
#sigma[[r]] <- ifelse(sigma[[r]] < 0, 0, sigma[[r]])
hist(log10(sigma[[r]]), main = paste(data[r,1]))
data$sigma.distrib.upp[r] <- quantile(sigma[[r]], 0.95, na.rm = T)
data$sigma.distrib.low[r] <- quantile(sigma[[r]], 0.05, na.rm = T)
data$sigma.distrib.cent[r] <- quantile(sigma[[r]], 0.5, na.rm = T)
distribution.r <- data.frame(species = rep(data[r, 2], 2000),
RM = rep(data[r, 3], 2000),
sigma = sigma[[r]],
Ne = NE[[r]],
De = NE[[r]]/data[r, "mag"],
NS = 1/beta[[r]])
distribution.data <- rbind(distribution.data, distribution.r)
rm(distribution.r)
}
#write.csv(data, "../results/sigma/gold_sigma.csv", row.names = FALSE,
#          quote = FALSE)
write.csv(data, "../results/sigma/all_sigma.csv", row.names = FALSE, quote = FALSE)
# Raincloud plots
library(tidyverse) # 2.0.0
library(ggdist) # 3.3.2
# Format 1
distribution.data |>
ggplot(aes(x = sigma, y = species, fill = species), colour = "black",
alpha = 0.5) +
geom_boxplot(outliers = FALSE, width = 0.1) +
geom_dots(binwidth = 0.01, overflow = "compress",
side = "bottom",
position = position_nudge(y = -0.075),
height = 0.55) +
stat_slab(position = position_nudge(y = 0.075),
height = 0.75) +
xlab(expression(paste((sigma), " in m"))) +
theme_bw(base_size = 14) +
theme(panel.grid.minor = element_blank(),
legend.position = "none")
ggsave("../results/sigma/all_sigma_rainclouds_m.pdf", height = 15, width = 20,
units = "cm", dpi = 400)
# Format 2 ####
# editing for presentation
library(colorspace)
#distribution.data <- distribution.data[distribution.data$species != "Acropora tenuis (Palm Islands)",]
distribution.data$species[distribution.data$species == "Acropora tenuis (GBR)"] = "Acropora tenuis"
# Define custom palette
pal <- c("Acropora aspera (C)" = "#FF8C00",
"Acropora millepora" = "darkblue",
"Montastrea cavernosa (3)" = "yellow",
"Acropora tenuis" = "#A034F0",
"Pocillopora acuta" = "#DB5461",
"Pocillopora damicornis (beta)" = "#CEB649",
"Pocillopora damicornis" = "#CEB649",
"Agaricia agaricites (aa1)" = "#274e13",
"Agaricia agaricites (aa2)" = "#8fce00",
"Agaricia humilis (ah1)" = "#b06100",
"Agaricia humilis (ah3)" = "#ff4e00",
"Helipora coerulea" = "#E6A0AD",
"Isopora brueggemani" = "dodgerblue",
"Corallium rubrum" = "#159090")
# Reorder factor levels
distribution.data$species <- factor(distribution.data$species,
levels = c("Acropora aspera (C)",
"Acropora millepora",
"Montastrea cavernosa (3)",
"Acropora tenuis",
"Pocillopora acuta",
"Pocillopora damicornis (beta)",
"Pocillopora damicornis",
"Agaricia agaricites (aa1)",
"Agaricia agaricites (aa2)",
"Agaricia humilis (ah1)",
"Agaricia humilis (ah3)",
"Helipora coerulea",
"Isopora brueggemani",
"Corallium rubrum"))
# Plotting sigma distributions ####
distribution.data |>
group_by(species) |>
filter(sigma<50000) |> # filtering by 1000km
ggplot(aes(x = sigma, y = species)) +
ggdist::stat_halfeye(
aes(color = species, fill = after_scale(lighten(color, 0.5))),
adjust = .5,
width = .75,
.width = 0,
justification = -.1,
point_color = NA,
height = 0.75,
position = position_nudge(y = 0.075)) +
geom_boxplot(aes(color = species,
color = after_scale(darken(color, .1, space = "HLS")),
fill = after_scale(desaturate(lighten(color, .8), .4))),
outliers = FALSE, width = 0.1) +
geom_dots(
aes(color = species,
color = after_scale(darken(color, .1, space = "HLS"))),
fill = "white",
shape = 21,
stroke = .4,
size = 0.1,
side = "bottom",
height = 0.5,
position = position_nudge(y = -0.08)
) +
stat_summary(
geom = "text",
fun = "median",
aes(label = round(..x.., 2),
color = species,
color = after_scale(darken(color, .1, space = "HLS"))),
fontface = "bold",
size = 4.5,
vjust = -1.1
) +
#xlim(c(-2,6)) +
ylab("Species") +
xlab(expression(paste(sigma, " in m"))) +
scale_color_manual(values = pal, guide = "none") +
scale_fill_manual(values = pal, guide = "none") +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
axis.text.y = element_text(face = "italic"))
# Format 2 ####
# editing for presentation
library(colorspace)
# Format 2 ####
# editing for presentation
library(colorspace)
#distribution.data <- distribution.data[distribution.data$species != "Acropora tenuis (Palm Islands)",]
distribution.data$species[distribution.data$species == "Acropora tenuis (GBR)"] = "Acropora tenuis"
# Define custom palette
pal <- c("Acropora aspera (C)" = "#FF8C00",
"Acropora millepora" = "darkblue",
"Montastrea cavernosa (3)" = "yellow",
"Acropora tenuis" = "#A034F0",
"Pocillopora acuta" = "#DB5461",
"Pocillopora damicornis (beta)" = "#CEB649",
"Pocillopora damicornis" = "#CEB649",
"Agaricia agaricites (aa1)" = "#274e13",
"Agaricia agaricites (aa2)" = "#8fce00",
"Agaricia humilis (ah1)" = "#b06100",
"Agaricia humilis (ah3)" = "#ff4e00",
"Helipora coerulea" = "#E6A0AD",
"Isopora brueggemani" = "dodgerblue",
"Corallium rubrum" = "#159090")
# Reorder factor levels
distribution.data$species <- factor(distribution.data$species,
levels = c("Acropora aspera (C)",
"Acropora millepora",
"Montastrea cavernosa (3)",
"Acropora tenuis",
"Pocillopora acuta",
"Pocillopora damicornis (beta)",
"Pocillopora damicornis",
"Agaricia agaricites (aa1)",
"Agaricia agaricites (aa2)",
"Agaricia humilis (ah1)",
"Agaricia humilis (ah3)",
"Helipora coerulea",
"Isopora brueggemani",
"Corallium rubrum"))
# Plotting sigma distributions ####
distribution.data |>
group_by(species) |>
filter(sigma<50000) |> # filtering by 1000km
ggplot(aes(x = sigma, y = species)) +
ggdist::stat_halfeye(
aes(color = species, fill = after_scale(lighten(color, 0.5))),
adjust = .5,
width = .75,
.width = 0,
justification = -.1,
point_color = NA,
height = 0.75,
position = position_nudge(y = 0.075)) +
geom_boxplot(aes(color = species,
color = after_scale(darken(color, .1, space = "HLS")),
fill = after_scale(desaturate(lighten(color, .8), .4))),
outliers = FALSE, width = 0.1) +
geom_dots(
aes(color = species,
color = after_scale(darken(color, .1, space = "HLS"))),
fill = "white",
shape = 21,
stroke = .4,
size = 0.1,
side = "bottom",
height = 0.5,
position = position_nudge(y = -0.08)
) +
stat_summary(
geom = "text",
fun = "median",
aes(label = round(..x.., 2),
color = species,
color = after_scale(darken(color, .1, space = "HLS"))),
fontface = "bold",
size = 4.5,
vjust = -1.1
) +
#xlim(c(-2,6)) +
ylab("Species") +
xlab(expression(paste(sigma, " in m"))) +
scale_color_manual(values = pal, guide = "none") +
scale_fill_manual(values = pal, guide = "none") +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
axis.text.y = element_text(face = "italic"))
ggsave("../results/sigma/all_sigma_rainclouds2_gamma-Ne_lnorm-b-actualmetresDIFFORDER.pdf", height = 17, width = 20,
units = "cm", dpi = 400)
# Plotting NS distributions #####
distribution.data |>
group_by(species) |>
filter(NS<1e7) |> # filtering NS outliers - excluding Amil
ggplot(aes(x = NS, y = species)) +
ggdist::stat_halfeye(
aes(color = species, fill = after_scale(lighten(color, 0.5))),
adjust = .5,
width = .75,
.width = 0,
justification = -.1,
point_color = NA,
height = 0.75,
position = position_nudge(y = 0.075)) +
geom_boxplot(aes(color = species,
color = after_scale(darken(color, .1, space = "HLS")),
fill = after_scale(desaturate(lighten(color, .8), .4))),
outliers = FALSE, width = 0.1) +
geom_dots(
aes(color = species,
color = after_scale(darken(color, .1, space = "HLS"))),
fill = "white",
shape = 21,
stroke = .4,
size = 0.1,
side = "bottom",
height = 0.5,
position = position_nudge(y = -0.08)
) +
stat_summary(
geom = "text",
fun = "median",
aes(label = round(..x.., 2),
color = species,
color = after_scale(darken(color, .1, space = "HLS"))),
fontface = "bold",
size = 4.5,
vjust = -1.1
) +
#xlim(c(-2,6)) +
ylab("Species") +
xlab(expression(paste("Neighbourhood Sizes"))) +
scale_color_manual(values = pal, guide = "none") +
scale_fill_manual(values = pal, guide = "none") +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
axis.text.y = element_text(face = "italic"))
ggsave("../results/sigma/all_NS_rainclouds2_gamma-Ne_lnorm-b_DIFFORDER.pdf", height = 15, width = 20,
units = "cm", dpi = 400)
# Plotting NS distributions #####
distribution.data |>
group_by(species) |>
#filter(NS<1e7) |> # filtering NS outliers - excluding Amil
ggplot(aes(x = NS, y = species)) +
ggdist::stat_halfeye(
aes(color = species, fill = after_scale(lighten(color, 0.5))),
adjust = .5,
width = .75,
.width = 0,
justification = -.1,
point_color = NA,
height = 0.75,
position = position_nudge(y = 0.075)) +
geom_boxplot(aes(color = species,
color = after_scale(darken(color, .1, space = "HLS")),
fill = after_scale(desaturate(lighten(color, .8), .4))),
outliers = FALSE, width = 0.1) +
geom_dots(
aes(color = species,
color = after_scale(darken(color, .1, space = "HLS"))),
fill = "white",
shape = 21,
stroke = .4,
size = 0.1,
side = "bottom",
height = 0.5,
position = position_nudge(y = -0.08)
) +
stat_summary(
geom = "text",
fun = "median",
aes(label = round(..x.., 2),
color = species,
color = after_scale(darken(color, .1, space = "HLS"))),
fontface = "bold",
size = 4.5,
vjust = -1.1
) +
#xlim(c(-2,6)) +
ylab("Species") +
xlab(expression(paste("Neighbourhood Sizes"))) +
scale_color_manual(values = pal, guide = "none") +
scale_fill_manual(values = pal, guide = "none") +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
axis.text.y = element_text(face = "italic"))
ggsave("../results/sigma/all_NS_rainclouds2_gamma-Ne_lnorm-b_DIFFORDER.pdf", height = 15, width = 20,
units = "cm", dpi = 400)
View(distribution.data)
View(dat)
View(data)
levels(distribution.data$species)
quantiles()
quantile()
quantiles(distribution.data$sigma[distribution.data$species == species], seq(0,1,0.25))
for (species in levels(distribution.data$species)) {
print(species)
quantile(distribution.data$sigma[distribution.data$species == species], seq(0,1,0.25))
}
for (species in levels(distribution.data$species)) {
print(species)
print(quantile(distribution.data$sigma[distribution.data$species == species], seq(0,1,0.25)))
}
for (species in levels(distribution.data$species)) {
print(species)
print(quantile(distribution.data$sigma[distribution.data$species == species], c(0.05, 0.5, 0.95)))
}
# Packages
library(ggplot2)
# Functions
plot.results <- function(results) {
for (pop in levels(results$Pop)) {
print(pop)
group <- results[results$Pop == pop,]
p <- ggplot(group, aes(Model, AIC)) + geom_point() + theme_bw() + ggtitle(pop)
print(p)
ggsave(paste0("../plots/model_summaries/", pop, ".model.summary.pdf"), p, height = 5, width = 5,
units = "cm", dpi = 400)
p1 <- ggplot(group[group$AIC < quantile(group$AIC, 0.9),], aes(Model, AIC)) +
geom_point() + theme_bw() + ggtitle(paste0(pop, " - Top 90%")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p1)
ggsave(paste0("../plots/model_summaries/", pop, ".AIC.top90.summary.pdf"), p1, height = 15, width = 15,
units = "cm", dpi = 400)
p2 <- ggplot(group[group$log.likelihood > quantile(group$log.likelihood, 0.9),],
aes(Model, log.likelihood)) +
geom_point() + theme_bw() + ggtitle(paste0(pop, " - Top 90%")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p2)
ggsave(paste0("../plots/model_summaries/", pop, ".log.likelihood.top90.summary.pdf"), p1, height = 15, width = 15,
units = "cm", dpi = 400)
print(as.data.frame(group[group$AIC == min(group$AIC),])[1,])
#for (model in levels(results$Model)) {
#  print(as.data.frame(group[group$AIC == min(group$AIC[group$Model == model]),])[1,])
#}
}
}
setwd("~/git/kp_dadi/scripts/")
# Packages
library(ggplot2)
# Functions
plot.results <- function(results) {
for (pop in levels(results$Pop)) {
print(pop)
group <- results[results$Pop == pop,]
p <- ggplot(group, aes(Model, AIC)) + geom_point() + theme_bw() + ggtitle(pop)
print(p)
ggsave(paste0("../plots/model_summaries/", pop, ".model.summary.pdf"), p, height = 5, width = 5,
units = "cm", dpi = 400)
p1 <- ggplot(group[group$AIC < quantile(group$AIC, 0.9),], aes(Model, AIC)) +
geom_point() + theme_bw() + ggtitle(paste0(pop, " - Top 90%")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p1)
ggsave(paste0("../plots/model_summaries/", pop, ".AIC.top90.summary.pdf"), p1, height = 15, width = 15,
units = "cm", dpi = 400)
p2 <- ggplot(group[group$log.likelihood > quantile(group$log.likelihood, 0.9),],
aes(Model, log.likelihood)) +
geom_point() + theme_bw() + ggtitle(paste0(pop, " - Top 90%")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p2)
ggsave(paste0("../plots/model_summaries/", pop, ".log.likelihood.top90.summary.pdf"), p1, height = 15, width = 15,
units = "cm", dpi = 400)
print(as.data.frame(group[group$AIC == min(group$AIC),])[1,])
#for (model in levels(results$Model)) {
#  print(as.data.frame(group[group$AIC == min(group$AIC[group$Model == model]),])[1,])
#}
}
}
setwd("~/git/kp_dadi/scripts/")
# Load data
results <- read.table("../results/dadi_optimisation.txt", sep = "\t",
header = TRUE)
results <- results[331:length(results[,1]),]
results$Pop <- as.factor(results$Pop)
results$Model <- as.factor(results$Model)
table(results$Pop, results$Model)
plot.results(results)
dat <- data.frame(Pop = numeric(0), Model = numeric(0), Opt = numeric(0))
for (group in sort(unique(results$Pop))) {
subset <- results[results$Pop == group,]
row <- head(subset[order(subset$AIC),],3)
row <- row[,c(1,3,5,6,10, 11)]
dat <- rbind(dat, row)
}
View(dat)
View(results)
View(dat)
# Packages
library(ggplot2)
# Functions
plot.results <- function(results) {
for (pop in levels(results$Pop)) {
print(pop)
group <- results[results$Pop == pop,]
p <- ggplot(group, aes(Model, AIC)) + geom_point() + theme_bw() + ggtitle(pop)
print(p)
ggsave(paste0("../plots/model_summaries/", pop, ".model.summary.pdf"), p, height = 5, width = 5,
units = "cm", dpi = 400)
p1 <- ggplot(group[group$AIC < quantile(group$AIC, 0.9),], aes(Model, AIC)) +
geom_point() + theme_bw() + ggtitle(paste0(pop, " - Top 90%")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p1)
ggsave(paste0("../plots/model_summaries/", pop, ".AIC.top90.summary.pdf"), p1, height = 15, width = 15,
units = "cm", dpi = 400)
p2 <- ggplot(group[group$log.likelihood > quantile(group$log.likelihood, 0.9),],
aes(Model, log.likelihood)) +
geom_point() + theme_bw() + ggtitle(paste0(pop, " - Top 90%")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p2)
ggsave(paste0("../plots/model_summaries/", pop, ".log.likelihood.top90.summary.pdf"), p1, height = 15, width = 15,
units = "cm", dpi = 400)
print(as.data.frame(group[group$AIC == min(group$AIC),])[1,])
#for (model in levels(results$Model)) {
#  print(as.data.frame(group[group$AIC == min(group$AIC[group$Model == model]),])[1,])
#}
}
}
setwd("~/git/kp_dadi/scripts/")
# Load data
results <- read.table("../results/dadi_optimisation.txt", sep = "\t",
header = TRUE)
results <- results[331:length(results[,1]),]
results$Pop <- as.factor(results$Pop)
results$Model <- as.factor(results$Model)
table(results$Pop, results$Model)
# Packages
library(ggplot2)
# Functions
plot.results <- function(results) {
for (pop in levels(results$Pop)) {
print(pop)
group <- results[results$Pop == pop,]
p <- ggplot(group, aes(Model, AIC)) + geom_point() + theme_bw() + ggtitle(pop)
print(p)
ggsave(paste0("../plots/model_summaries/", pop, ".model.summary.pdf"), p, height = 5, width = 5,
units = "cm", dpi = 400)
p1 <- ggplot(group[group$AIC < quantile(group$AIC, 0.9),], aes(Model, AIC)) +
geom_point() + theme_bw() + ggtitle(paste0(pop, " - Top 90%")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p1)
ggsave(paste0("../plots/model_summaries/", pop, ".AIC.top90.summary.pdf"), p1, height = 15, width = 15,
units = "cm", dpi = 400)
p2 <- ggplot(group[group$log.likelihood > quantile(group$log.likelihood, 0.9),],
aes(Model, log.likelihood)) +
geom_point() + theme_bw() + ggtitle(paste0(pop, " - Top 90%")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p2)
ggsave(paste0("../plots/model_summaries/", pop, ".log.likelihood.top90.summary.pdf"), p1, height = 15, width = 15,
units = "cm", dpi = 400)
print(as.data.frame(group[group$AIC == min(group$AIC),])[1,])
#for (model in levels(results$Model)) {
#  print(as.data.frame(group[group$AIC == min(group$AIC[group$Model == model]),])[1,])
#}
}
}
setwd("~/git/kp_dadi/scripts/")
# Load data
results <- read.table("../results/dadi_optimisation.txt", sep = "\t",
header = TRUE)
results <- results[331:length(results[,1]),]
results$Pop <- as.factor(results$Pop)
results$Model <- as.factor(results$Model)
table(results$Pop, results$Model)
plot.results(results)
dat <- data.frame(Pop = numeric(0), Model = numeric(0), Opt = numeric(0))
for (group in sort(unique(results$Pop))) {
subset <- results[results$Pop == group,]
row <- head(subset[order(subset$AIC),],3)
row <- row[,c(1,3,5,6,10, 11)]
dat <- rbind(dat, row)
}
View(dat)
850000/1000
1300000/1000
